services:
  postgres:
    image: postgres:14
    container_name: mlflow-postgres
    restart: always
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  mlflow:
    build:
      context: .
      dockerfile: deployment/mlflow/Dockerfile
    image: mlflow-with-pg:latest
    container_name: mlflow-tracking-server
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5555:5000"
    # ðŸ‘‡ CLAVE: servir artefactos por HTTP y guardarlos en /mlflow/artifacts dentro del contenedor
    command: >
      mlflow server
      --host 0.0.0.0
      --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow
      --serve-artifacts
      --artifacts-destination /mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts

  api:
    build:
      context: .
      dockerfile: deployment/fastapi/Dockerfile
    image: digital-orders-api:latest
    container_name: digital-orders-api
    depends_on:
      mlflow:
        condition: service_started
    environment:
      # IMPORTANTE: dentro de la red de Docker el MLflow escucha en 5000
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MODEL_NAME: digital_orders_xgboost
      MODEL_STAGE: Production   # o Staging, o None
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

volumes:
  postgres_data:
  mlflow_artifacts:
